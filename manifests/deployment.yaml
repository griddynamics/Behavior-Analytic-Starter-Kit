#
# Copyright 2013, Grid Dynamics Inc. Deming Project.
# @author Anton Haldin (ahaldin@griddynamics.com)
# @author Denis Khurtin (dkhurtin@griddynamics.com)
#

#################################
# Description of env properties #
#################################
header:
    services:
        properties:
            s3_bucket_name: consume-signal(string)

launch:
    parameters:
        cookbooks_url:
            description: "Cookbooks URL"
            default: "http://gd-bask.s3.amazonaws.com/cookbooks.tar.gz"
    steps:
        - get_env_props:
            action: getEnvironmentProperties
            parameters:
                phase: get-env-props
            output:
                config: result
        - start_build_server_vm:
            action: provisionVms
            phase: provision_build_server
            parameters:
                hardwareId: m1.medium
                imageId: us-east-1/ami-d41689bd
                vmIdentity: ec2-user
                roleName: build_server
                jcloudsNodeNamePrefix: build_server
            output:
                 build_server_ips: ips

        - build_server_setup:
            action: chefsolo
            phase: server_setup
            precedingPhases: [ provision_build_server ]
            parameters:
                roles: [ build_server ]
                runList: [ "recipe[java::openjdk]", "recipe[build-essential]", "recipe[s3manage::packages]" ]
                isSolo: true
                recipeUrl: ${cookbooks_url}
                jattrs:
                    java:
                        jdk_version: "7"
                        java_home: "/usr/lib/jvm/java/"

        - install_git:
            action: execrun
            phase: install_git
            precedingPhases: [ server_setup ]
            parameters:
                roles: [ build_server ]
                isSudo: true
                command:
                    - bash -c
                    - |
                        yum -y install git || exit 1

        - install_maven:
            action: execrun
            phase: install_maven
            precedingPhases: [ server_setup ]
            parameters:
                roles: [ build_server ]
                isSudo: true
                command:
                    - bash -c
                    - |
                        cd /usr/local || exit 1
                        wget "http://apache-mirror.rbc.ru/pub/apache/maven/maven-3/3.1.0/binaries/apache-maven-3.1.0-bin.tar.gz" || exit 2
                        tar -xzf apache-maven-3.1.0-bin.tar.gz || exit 3
                        echo 'export M2_HOME=/usr/local/apache-maven-3.1.0' > /etc/profile.d/maven.sh || exit 4
                        echo 'export M2=$$M2_HOME/bin' >> /etc/profile.d/maven.sh || exit 5
                        echo 'export PATH=$$M2:$$PATH' >> /etc/profile.d/maven.sh || exit 6
                        source /etc/profile.d/maven.sh || exit 7
                        ln -s /usr/local/apache-maven-3.1.0/bin/mvn /usr/bin/mvn || exit 8
                        mvn -version || exit 9

        - install_s3cmd:
            action: .s3manage
            phase: install_s3cmd
            precedingPhases: [ server_setup ]

    return:
        build_server_ip:
            description: "Build Server IP:"
            value: "{$.build_server_ips[0]}"


Redeploy_java_artifacts:
    parameters:
        cookbooks_url:
            description: "Cookbooks URL"
            default: "http://gd-bask.s3.amazonaws.com/cookbooks.tar.gz"
        repo_localpath:
            description: "Local path to repo"
            default: "/var/local/git_repos/bask"
        git_repo_url:
            description: "Git repo URL"
            default: "https://github.com/griddynamics/Behavior-Analytic-Starter-Kit.git"
        git_branch:
            description: "Git branch"
            default: "master"
    steps:
        - fetch_git_repo_to_build_java_artifacts:
            action: .fetch_git_repo
            phase: fetch_git_repo_to_build_java_artifacts
            parameters:
                repo_localpath: ${repo_localpath}
                git_repo_url: ${git_repo_url}
                git_branch: ${git_branch}

        - build_maven_projects:
            action: execrun
            phase: build_maven_projects
            precedingPhases: [ fetch_git_repo_to_build_java_artifacts ]
            parameters:
                roles: [ build_server ]
                isSudo: true
                command:
                    - bash -c
                    - |
                        cd ${repo_localpath}/maven_projects || exit 1
                        mvn clean install || exit 2
                        if [ -d "${repo_localpath}/maven_artifacts" ]; then
                            rm -rf ${repo_localpath}/maven_artifacts || exit 3
                        fi
                        mkdir "${repo_localpath}/maven_artifacts" || exit 4
                        cp ${repo_localpath}/maven_projects/web-store/site/target/site.war \
                           ${repo_localpath}/maven_artifacts/webstore.war || exit 5
                        cp ${repo_localpath}/maven_projects/web-store/admin/target/admin.war \
                           ${repo_localpath}/maven_artifacts/webstore-admin.war || exit 6
                        cp ${repo_localpath}/maven_projects/dataset-generator/target/dataset-generator-1.0-SNAPSHOT-jar-with-dependencies.jar \
                           ${repo_localpath}/maven_artifacts/transaction-log-generator.jar || exit 7
                        cp ${repo_localpath}/maven_projects/recommendation-processor/target/recommendation-processor-1.0-SNAPSHOT-jar-with-dependencies.jar \
                           ${repo_localpath}/maven_artifacts/recommendation-processor.jar || exit 8

        - uploading_java_artifacts_to_s3:
            action: execrun
            phase: uploading_java_artifacts_to_s3
            precedingPhases: [ build_maven_projects ]
            parameters:
                roles: [ build_server ]
                isSudo: true
                command:
                    - bash -c
                    - |
                        s3cmd put -P "${repo_localpath}/maven_artifacts/webstore.war" \
                            "s3://{$.config.properties.s3_bucket_name}/webstore.war" || exit 1
                        s3cmd put -P "${repo_localpath}/maven_artifacts/webstore-admin.war" \
                            "s3://{$.config.properties.s3_bucket_name}/webstore-admin.war" || exit 2
                        s3cmd put -P "${repo_localpath}/maven_artifacts/transaction-log-generator.jar" \
                            "s3://{$.config.properties.s3_bucket_name}/transaction-log-generator.jar" || exit 3
                        s3cmd put -P "${repo_localpath}/maven_artifacts/recommendation-processor.jar" \
                            "s3://{$.config.properties.s3_bucket_name}/recommendation-processor.jar" || exit 4


Redeploy_cookbooks:
    parameters:
        cookbooks_url:
            description: "Cookbooks URL"
            default: "http://gd-bask.s3.amazonaws.com/cookbooks.tar.gz"
        repo_localpath:
            description: "Local path to repo"
            default: "/var/local/git_repos/bask"
        git_repo_url:
            description: "Git repo URL"
            default: "https://github.com/griddynamics/Behavior-Analytic-Starter-Kit.git"
        git_branch:
            description: "Git branch"
            default: "master"
    steps:
        - fetch_git_repo_to_create_cookbooks_archive:
            action: .fetch_git_repo
            phase: fetch_git_repo_to_create_cookbooks_archive
            parameters:
                repo_localpath: ${repo_localpath}
                git_repo_url: ${git_repo_url}
                git_branch: ${git_branch}

        - create_cookbooks_archive:
            action: execrun
            phase: create_cookbooks_archive
            precedingPhases: [ fetch_git_repo_to_create_cookbooks_archive ]
            parameters:
                roles: [ build_server ]
                isSudo: true
                command:
                    - bash -c
                    - |
                        cd ${repo_localpath} || exit 1
                        if [ -d "${repo_localpath}/chef_artifacts" ]; then
                            rm -rf "${repo_localpath}/chef_artifacts" || exit 2
                        fi
                        mkdir "${repo_localpath}/chef_artifacts" || exit 3
                        tar -czf ${repo_localpath}/chef_artifacts/cookbooks.tar.gz ./cookbooks || exit 4

        - uploading_cookbooks_to_S3:
            action: execrun
            phase: uploading_cookbooks_to_S3
            precedingPhases: [ create_cookbooks_archive ]
            parameters:
                roles: [ build_server ]
                isSudo: true
                command:
                    - bash -c
                    - |
                        s3cmd put -P "${repo_localpath}/chef_artifacts/cookbooks.tar.gz" \
                            "s3://{$.config.properties.s3_bucket_name}/cookbooks.tar.gz" || exit 1


####################
# Hidden workflows #
####################
.s3manage:
    parameters:
        aws_access_key_id:
            description: "aws_access_key_id"
        aws_secret_access_key:
            description: "aws_secret_access_key"
    steps:
        - install_s3cmd_package:
            action: execrun
            phase: install_s3cmd_package
            parameters:
                roles: [ build_server ]
                isSudo: true
                command:
                    - bash -c
                    - |
                        yum -y install s3cmd || exit 1
                        echo -e "[default]\naccess_key = ${aws_access_key_id}\nsecret_key = ${aws_secret_access_key}\n" > ~/.s3cfg || exit 2


.fetch_git_repo:
    parameters:
        repo_localpath:
            description: "Local path to git repo"
        git_repo_url:
            description: "URL to git repo"
        git_branch:
            description: "Git branch"
    steps:
        - fetch_git_repo:
            action: execrun
            phase: fetch_git_repo
            parameters:
                roles: [ build_server ]
                isSudo: true
                command:
                    - bash -c
                    - |
                        if [ -d ${repo_localpath} ]; then
                            cd ${repo_localpath} || exit -1
                            git fetch --all || exit -2
                        else
                            git clone ${git_repo_url} ${repo_localpath} || exit 1
                            cd ${repo_localpath} || exit 2
                        fi
                        git reset --hard origin/${git_branch} || exit 3


destroy:
    steps:
        - destroy:
            action: undeployEnv
            phase: destroy
