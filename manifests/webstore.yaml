#
# Copyright 2013, Grid Dynamics Inc. Deming Project.
# @author Maksim malchuk (mmalchuk@griddynamics.com)
# @author Nickolay Yurin (nyurin@griddynamics.com)
# @author Anton Haldin (ahaldin@griddynamics.com)
#
header:
  services:
    properties:
        s3_bucket_name: consume-signal(string)

launch:
    parameters:
        admin_app_url:
            description: "admin_app_url"
            default: "http://gd-bask.s3.amazonaws.com/bask-admin.war"
        site_app_url:
            description: "site_app_url"
            default: "http://gd-bask.s3.amazonaws.com/bask-site.war"
    steps:
        - get_env_props:
            action: getEnvironmentProperties
            parameters:
                phase: get-env-props
            output:
                config: result
        - start_webstore_vm:
            action: provisionVms
            parameters:
                hardwareId: m1.medium
                imageId: us-east-1/ami-d41689bd
                vmIdentity: ec2-user
                phase: start_webstore_vm
                roleName: webstore
                jcloudsNodeNamePrefix: webstore
            output:
                ips_tomcat: privateips
                ips_tomcat_pub: ips

        - webstore_setup:
            action: chefsolo
            phase: webstore_setup
            precedingPhases: [ start_webstore_vm ]
            parameters:
                roles: [ webstore ]
                runList: [ "recipe[java::openjdk]", "recipe[webstore::default]", "recipe[s3manage::packages]" ]
                isSolo: true
                recipeUrl: "http://gd-bask.s3.amazonaws.com/cookbooks.tar.gz"
                jattrs:
                    java:
                        jdk_version: "7"
                        java_home: "/usr/lib/jvm/java/"
                    webstore:
                        admin_app_url: ${admin_app_url}
                        site_app_url: ${site_app_url}
        - updating_catalog:
            action: Load_product_catalog_from_S3
            phase: updating_catalog
            precedingPhases: [ webstore_setup ]
            parameters:
                bucket: "gd-bask"
                filename: "catalog.zip"

        - downloading_recommendations:
            action: .s3manage
            phase: downloading_recommendations
            precedingPhases: [ updating_catalog ]
            parameters:
                localpath: "/tmp"
                bucket: "gd-bask"
                s3_filename: "recommendations.txt"
                action: "download"

        - uploading_test_recommendations_to_store:
            action: execrun
            phase: downloading_product_catalog
            precedingPhases: [ downloading_recommendations ]
            parameters:
                roles: [ webstore ]
                isSudo: true
                command:
                    - bash -c
                    - |
                        curl -F 'file=@/tmp/recommendations.txt' http://localhost:8080/webstore/api/v1/recommendations/import
                        rm /tmp/recommendations.txt

    return:
        webstore_url:
            description: "Web Store:"
            value:
                - "http://{$.ips_tomcat_pub[0]}:8080/webstore/"

Save_product_catalog_structure_to_S3:
    parameters:
        filename:
            description: "S3 product catalog structure filename"
            default: "product_catalog_structure.json"
    steps:
        downloading_product_catalog:
            action: execrun
            phase: downloading_product_catalog
            parameters:
                roles: [ webstore ]
                isSudo: true
                command:
                    - bash -c
                    - |
                        curl -o /tmp/${filename} http://localhost:8080/webstore/api/v1/catalog_manager/export

        uploading_to_S3:
            action: .s3manage
            parameters:
                localpath: "/tmp/${filename}"
                bucket: "{$.config.properties.s3_bucket_name}"
                action: "upload"
    return:
        Product_catalog_path:
            description: "Product catalog structure S3 URL:"
            value: "s3://{$.config.properties.s3_bucket_name}/${filename}"

Load_recommendations_from_S3:
    parameters:
        filename:
            description: "recommendations filename"
            default: "recommendations.txt"
    steps:
        downloading_recommendations:
            action: .s3manage
            phase: downloading_recommendations
            parameters:
                localpath: "/tmp"
                bucket: "{$.config.properties.s3_bucket_name}"
                s3_filename: ${filename}
                action: "download"
        uploading_recommendations_to_store:
            action: execrun
            phase: downloading_product_catalog
            precedingPhases: [ downloading_recommendations ]
            parameters:
                roles: [ webstore ]
                isSudo: true
                command:
                    - bash -c
                    - |
                        curl -F 'file=@/tmp/${filename}' http://localhost:8080/webstore/api/v1/recommendations/import
                        rm /tmp/${filename}

Load_product_catalog_from_S3:
    parameters:
        bucket:
            description: "s3 bucket"
            default: "gd-bask"
        filename:
            description: "catalog filename"
            default: "catalog.zip"
    steps:
        downloading_catalog:
            action: .s3manage
            phase: downloading_catalog
            parameters:
                localpath: "/tmp"
                bucket: ${bucket}
                s3_filename: ${filename}
                action: "download"
        uploading_catalog_to_store:
            action: execrun
            phase: uploading_catalog_to_store
            precedingPhases: [ downloading_catalog ]
            parameters:
                roles: [ webstore ]
                isSudo: true
                command:
                    - bash -c
                    - |
                        curl -F 'file=@/tmp/${filename}' http://localhost:8080/webstore/api/v1/catalog_manager/import

.s3manage:
    parameters:
        aws_access_key_id:
            description: "aws_access_key_id"
        aws_secret_access_key:
            description: "aws_secret_access_key"
        localpath:
            description: "local file path"
        bucket:
            description: "s3 bucket"
        s3_filename:
            description: "s3 file name (only for download)"
            default: ""
        action:
            description: "file action"
    steps:
        s3transfer:
            action: chefsolo
            phase: transferring
            parameters:
                roles: [ webstore ]
                runList: [ "recipe[s3manage::default]" ]
                isSolo: true
                recipeUrl: "http://gd-bask.s3.amazonaws.com/cookbooks.tar.gz"
                jattrs:
                    s3manage:
                        access_key_id: ${aws_access_key_id}
                        secret_access_key: ${aws_secret_access_key}
                        localpath: ${localpath}
                        bucket: ${bucket}
                        s3file: ${s3_filename}
                        action: ${action}
destroy:
    steps:
        - destroy:
            action: undeployEnv
