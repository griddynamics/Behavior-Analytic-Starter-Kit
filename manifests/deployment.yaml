#
# Copyright 2013, Grid Dynamics Inc. Deming Project.
# @author Anton Haldin (ahaldin@griddynamics.com)
# @author Denis Khurtin (dkhurtin@griddynamics.com)
#

#################################
# Description of env properties #
#################################
header:
    services:
        properties:
            s3_bucket_name: consume-signal(string)

launch:
    parameters:
        git_repo_url:
            description: "Remote URL to git repository"
            default: "https://github.com/griddynamics/Behavior-Analytic-Starter-Kit.git"
        git_repo_localpath:
            description: "Path to git repository in local file system of VM"
            default: "/var/local/git_repos/bask"
    steps:
        - get_env_props:
            action: getEnvironmentProperties
            parameters:
                phase: get-env-props
            output:
                config: result

        - start_build_server_vm:
            action: provisionVms
            phase: provision_build_server
            parameters:
                hardwareId: m1.medium
                imageId: us-east-1/ami-d41689bd
                vmIdentity: ec2-user
                roleName: build_server
                jcloudsNodeNamePrefix: build_server
            output:
                 build_server_ips: ips

        - server_setup:
            action: execrun
            phase: server_setup
            precedingPhases: [ provision_build_server ]
            parameters:
                roles: [ build_server ]
                isSudo: true
                command:
                    - bash -c
                    - |
                        yum -y install git || exit 1

        - install_s3cmd:
            action: .s3manage
            phase: install_s3cmd
            precedingPhases: [ server_setup ]

        - clone_git_repo:
            action: execrun
            phase: clone_git_repo
            precedingPhases: [ server_setup ]
            parameters:
                roles: [ build_server ]
                isSudo: true
                command:
                    - bash -c
                    - |
                        git clone ${git_repo_url} ${git_repo_localpath} || exit 1

    return:
        build_server_ip:
            description: "1. Build Server IP:"
            value: "{$.build_server_ips[0]}"
        git_repo_url:
            description: "2. URL to git repository:"
            value: ${git_repo_url}
        git_repo_localpath:
            description: "3. Path to git repository:"
            value: ${git_repo_localpath}


Redeploy_java_artifacts:
    parameters:
        git_branch:
            description: "Git branch"
            default: "master"
    steps:
        - prepare_java_dev_tools:
            action: execrun
            phase: prepare_java_dev_tools
            parameters:
                roles: [ build_server ]
                isSudo: true
                command:
                    - bash -c
                    - |
                        mvn --version
                        if [ $$? -ne 0 ]; then
                            yum -y install java-1.7.0-openjdk-devel || exit -1

                            ##### maven installation #####
                            cd /usr/local || exit 1
                            wget "http://apache-mirror.rbc.ru/pub/apache/maven/maven-3/3.1.0/binaries/apache-maven-3.1.0-bin.tar.gz" || exit 2
                            tar -xzf apache-maven-3.1.0-bin.tar.gz || exit 3
                            echo 'export M2_HOME=/usr/local/apache-maven-3.1.0' > /etc/profile.d/maven.sh || exit 4
                            echo 'export M2=$$M2_HOME/bin' >> /etc/profile.d/maven.sh || exit 5
                            echo 'export PATH=$$M2:$$PATH' >> /etc/profile.d/maven.sh || exit 6
                            source /etc/profile.d/maven.sh || exit 7
                            ln -s /usr/local/apache-maven-3.1.0/bin/mvn /usr/bin/mvn || exit 8
                            mvn -version || exit 9
                        fi


        - prepare_git_repo_to_build_java_artifacts:
            action: .fetch_and_reset_git_repo
            phase: prepare_git_repo_to_build_java_artifacts
            parameters:
                git_branch: ${git_branch}

        - build_maven_projects:
            action: execrun
            phase: build_maven_projects
            precedingPhases: [ prepare_java_dev_tools, prepare_git_repo_to_build_java_artifacts ]
            parameters:
                roles: [ build_server ]
                isSudo: true
                command:
                    - bash -c
                    - |
                        cd {$.git_repo_localpath}/maven_projects || exit 1
                        mvn clean install || exit 2
                        if [ -d "{$.git_repo_localpath}/maven_artifacts" ]; then
                            rm -rf {$.git_repo_localpath}/maven_artifacts || exit 3
                        fi
                        mkdir "{$.git_repo_localpath}/maven_artifacts" || exit 4
                        cp {$.git_repo_localpath}/maven_projects/web-store/site/target/site.war \
                           {$.git_repo_localpath}/maven_artifacts/webstore.war || exit 5
                        cp {$.git_repo_localpath}/maven_projects/web-store/admin/target/admin.war \
                           {$.git_repo_localpath}/maven_artifacts/webstore-admin.war || exit 6
                        cp {$.git_repo_localpath}/maven_projects/dataset-generator/target/dataset-generator-1.0-SNAPSHOT-jar-with-dependencies.jar \
                           {$.git_repo_localpath}/maven_artifacts/transaction-log-generator.jar || exit 7
                        cp {$.git_repo_localpath}/maven_projects/recommendation-processor/target/recommendation-processor-1.0-SNAPSHOT-jar-with-dependencies.jar \
                           {$.git_repo_localpath}/maven_artifacts/recommendation-processor.jar || exit 8

        - uploading_java_artifacts_to_s3:
            action: execrun
            phase: uploading_java_artifacts_to_s3
            precedingPhases: [ build_maven_projects ]
            parameters:
                roles: [ build_server ]
                isSudo: true
                command:
                    - bash -c
                    - |
                        s3cmd put -P "{$.git_repo_localpath}/maven_artifacts/webstore.war" \
                            "s3://{$.config.properties.s3_bucket_name}/webstore.war" || exit 1
                        s3cmd put -P "{$.git_repo_localpath}/maven_artifacts/webstore-admin.war" \
                            "s3://{$.config.properties.s3_bucket_name}/webstore-admin.war" || exit 2
                        s3cmd put -P "{$.git_repo_localpath}/maven_artifacts/transaction-log-generator.jar" \
                            "s3://{$.config.properties.s3_bucket_name}/transaction-log-generator.jar" || exit 3
                        s3cmd put -P "{$.git_repo_localpath}/maven_artifacts/recommendation-processor.jar" \
                            "s3://{$.config.properties.s3_bucket_name}/recommendation-processor.jar" || exit 4


Redeploy_cookbooks:
    parameters:
        git_branch:
            description: "Git branch"
            default: "master"
    steps:
        - prepare_git_repo_to_create_cookbooks_archive:
            action: .fetch_and_reset_git_repo
            phase: prepare_git_repo_to_create_cookbooks_archive
            parameters:
                git_branch: ${git_branch}

        - create_cookbooks_archive:
            action: execrun
            phase: create_cookbooks_archive
            precedingPhases: [ prepare_git_repo_to_create_cookbooks_archive ]
            parameters:
                roles: [ build_server ]
                isSudo: true
                command:
                    - bash -c
                    - |
                        cd {$.git_repo_localpath} || exit 1
                        if [ -d "{$.git_repo_localpath}/chef_artifacts" ]; then
                            rm -rf "{$.git_repo_localpath}/chef_artifacts" || exit 2
                        fi
                        mkdir "{$.git_repo_localpath}/chef_artifacts" || exit 3
                        tar -czf {$.git_repo_localpath}/chef_artifacts/cookbooks.tar.gz ./cookbooks || exit 4

        - uploading_cookbooks_to_S3:
            action: execrun
            phase: uploading_cookbooks_to_S3
            precedingPhases: [ create_cookbooks_archive ]
            parameters:
                roles: [ build_server ]
                isSudo: true
                command:
                    - bash -c
                    - |
                        s3cmd put -P "{$.git_repo_localpath}/chef_artifacts/cookbooks.tar.gz" \
                            "s3://{$.config.properties.s3_bucket_name}/cookbooks.tar.gz" || exit 1


Run_bdd_tests:
    parameters:
        git_branch:
            description: "Git branch"
            default: "master"
        qubell_user:
            description: "Qubell user"
        qubell_password:
            description: "Password"
    steps:
        - prepare_ruby_dev_tools:
            action: execrun
            phase: prepare_ruby_dev_tools
            parameters:
                roles: [ build_server ]
                isSudo: true
                command:
                    - bash -c
                    - |
                        cucumber --version
                        if [ $$? -ne 0 ]; then
                            yum -y install make gcc ruby-devel rubygems httpd || exit 1
                            gem install json --no-ri --no-rdoc || exit 3
                            gem install rest-client --no-ri --no-rdoc || exit 4
                            gem install cucumber --no-ri --no-rdoc || exit 2

                            service httpd restart || exit 5
                        fi

        - prepare_git_repo_to_run_tests:
            action: .fetch_and_reset_git_repo
            phase: prepare_git_repo_to_run_tests
            parameters:
                git_branch: ${git_branch}

        - run_bdd_tests:
            action: execrun
            phase: run_bdd_tests
            precedingPhases: [ prepare_ruby_dev_tools, prepare_git_repo_to_run_tests ]
            parameters:
                roles: [ build_server ]
                isSudo: true
                command:
                    - bash -c
                    - |
                        cd {$.git_repo_localpath} || exit 1

                        export QUBELL_TEST_USER='${qubell_user}'
                        export QUBELL_TEST_PASSWORD='${qubell_password}'

                        cucumber -f html -o /var/www/html/cucumber.html || exit 4

    return:
        test_reports:
            description: "4. Test report:"
            value: "http://{$.build_server_ips[0]}/cucumber.html"


####################
# Hidden workflows #
####################
.s3manage:
    parameters:
        aws_access_key_id:
            description: "aws_access_key_id"
        aws_secret_access_key:
            description: "aws_secret_access_key"
    steps:
        - install_s3cmd_package:
            action: execrun
            phase: install_s3cmd_package
            parameters:
                roles: [ build_server ]
                isSudo: true
                command:
                    - bash -c
                    - |
                        yum -y install s3cmd || exit 1
                        echo -e "[default]\naccess_key = ${aws_access_key_id}\nsecret_key = ${aws_secret_access_key}\n" > ~/.s3cfg || exit 2


.fetch_and_reset_git_repo:
    parameters:
        git_branch:
            description: "Git branch"
    steps:
        - fetch_git_repo:
            action: execrun
            phase: fetch_git_repo
            parameters:
                roles: [ build_server ]
                isSudo: true
                command:
                    - bash -c
                    - |
                        cd {$.git_repo_localpath} || exit -1
                        git fetch --all || exit -2
                        git reset --hard origin/${git_branch} || exit 3


destroy:
    steps:
        - destroy:
            action: undeployEnv
            phase: destroy
